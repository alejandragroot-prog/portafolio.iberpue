{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"P\u00e1gina principal","text":"<p>Bienvenido \ud83d\udc4b Este es mi portafolio</p>"},{"location":"Tutorial/","title":"PR\u00c1CTICAS PRIMER SEMESTRE","text":""},{"location":"Tutorial/#microcontroladores","title":"Microcontroladores","text":""},{"location":"Tutorial/#sp32","title":"SP32","text":"<ul> <li>El ESP32 es un microcontrolador, al igual que el Arduino, pero tiene conectividad Bluetooth y WiFi ya integrada en la placa. Esto facilita mucho los proyectos de IoT, ya que intercambiar\u00e1n informaci\u00f3n constantemente con la red.</li> </ul> Antes de iniciar <p>Toda la programaci\u00f3n se realiza con el programa arduino, asi mismo asegurate de tener descargada la biblioteca ESP 32 by Arduino.</p> <ul> <li>Materiales: </li> <li>ESP 32</li> <li>1 resistencia de 1K</li> <li>Jumpers</li> <li>Led</li> <li>Bot\u00f3n</li> <li>Resistencia de 10k</li> </ul>"},{"location":"Tutorial/#practica-1","title":"Pr\u00e1ctica 1","text":""},{"location":"Tutorial/#parte-1","title":"Parte 1:","text":"<p>Video Bot\u00f3n</p> <p></p> <pre><code>  const int led = 33;\n  const int led = 25;\n  void setup(){\n    serial.begin(115200); //INICIO DE LA COMUNICACION\n  pinMode(led, OUTPUT);\n  pinMode(btn, INPUT);\n  }\n  void loop(){\n    int estado= digitalRead(btn);\n    if (estado==1){\n      digitalWrite(led,1);\n    }\n  else{\n    digitalWrite(led,0)\n  }\n} \n</code></pre>"},{"location":"Tutorial/#parte-2-conectar-esp32-por-bluetooth","title":"Parte 2: Conectar ESP32 por Bluetooth","text":"<p>Para poder controlar la ESP32 se utiliza la aplicaci\u00f3n \"Serial Bluetooth Terminal\"</p> Antes de iniciar <p>Los tel\u00e9fonos iPhone no se pueden conectar a la aplicaci\u00f3n por lo que se puede probar con dispositivos Android o una computadora con Bluetooth</p> <p>Video Bluetooth</p> <pre><code>  const int led = 33;\n  const int led = 25;\n  void setup(){\n    serial.begin(115200); //INICIO DE LA COMUNICACION\n    serialBT.begin (\"Arduinito\") // Nombre del dispositivo Bluetooth\n  }\n  void loop(){\n    if (SerialBT.available()){\n          String mensaje= SerialBT.readString();\n          Serial.printlin(\"Recibido: \"+mensaje);\n      if (mensaje==1){\n      digitalWrite(led,1);\n    }\n    else{\n    digitalWrite(led,0)\n     }\n  }\n  delay (1000);\n}\n</code></pre>"},{"location":"Tutorial/#practica-2","title":"Pr\u00e1ctica 2","text":"<ul> <li>Materiales: </li> <li>ESP 32</li> <li>Jumpers</li> <li>Motor</li> <li>Puente H</li> </ul>"},{"location":"Tutorial/#puente-h","title":"Puente H","text":"<ul> <li>El puente H es un circuito electr\u00f3nico que se utiliza para controlar el movimiento de motores, en particular motores de corriente continua (DC). Su nombre se debe a la forma t\u00edpica del circuito, que se asemeja a la letra \u00abH\u00bb. El principal objetivo del puente H es permitir que un motor gire en ambas direcciones: hacia adelante y hacia atr\u00e1s. Para lograr esto, se utilizan conmutadores o interruptores, que pueden ser mec\u00e1nicos (como rel\u00e9s) o electr\u00f3nicos (como transistores).</li> <li>El puente H se conecta siguiendo el siguiente diagrama:   </li> </ul>"},{"location":"Tutorial/#parte-1_1","title":"Parte 1:","text":"<p>El siguiente video se puede observar el funcionamiento objetivo de esta pr\u00e1ctica:</p> <p>Video motor parte 1</p> <p></p> <pre><code>  #define in1 2\n  #define in2 15\n  void setup(){\n    pinMode(in1, OUTPUT);\n    pinMode(in2, OUTPUT);\n  }\n  void loop(){\n   digitalWrite (in1,1);\n   digitalWrite (in2,0);\n   delay(4000);\n   digitalWrite (in1,0);\n   digitalWrite (in2,0);\n   delay(2000);\n   digitalWrite (in1,0);\n   digitalWrite (in2,1);\n   delay(4000);\n} \n</code></pre>"},{"location":"Tutorial/#pwm","title":"PWM","text":"<p>La Modulaci\u00f3n por Ancho de Pulso (PWM) es una t\u00e9cnica que permite simular una se\u00f1al anal\u00f3gica utilizando una se\u00f1al digital que alterna r\u00e1pidamente entre los estados HIGH y LOW. Esto es \u00fatil para controlar dispositivos como LEDs, motores y altavoces, ajustando su brillo, velocidad o tono, respectivamente.</p> <p>Funcionamiento de PWM en Arduino</p> <p>Arduino utiliza temporizadores internos para generar se\u00f1ales PWM en pines espec\u00edficos marcados con el s\u00edmbolo ~. La funci\u00f3n principal para trabajar con PWM es analogWrite(pin, valor), donde el par\u00e1metro valor var\u00eda entre 0 y 255:</p> <p>0: La se\u00f1al estar\u00e1 siempre en LOW.</p> <p>255: La se\u00f1al estar\u00e1 siempre en HIGH.</p> <p>127: La se\u00f1al estar\u00e1 en HIGH el 50% del tiempo (ciclo de trabajo del 50%).</p>"},{"location":"Tutorial/#parte-2-controlar-la-velocidad-de-un-motor","title":"Parte 2: Controlar la velocidad de un motor","text":"<p>Video motor parte 2</p> <p>En esta parte de la pr\u00e1ctica se programa el ESP32 para controlar la velocidad de un motor, que esta misma aumente progresivamente</p> <pre><code>  /*Control de 1 solo motor*/\n#define in1 14\n#define in2 27\n#define pwm 25 //Definicion de pin de Velocidad\n\nvoid setup() {\n  /*Declarar Pines Como salida*/\n  pinMode(in1, OUTPUT);\n  pinMode(in2, OUTPUT);\n  /*Configuracion de pin PWM \n    - Se conecta al pin 12(pwm)\n    - Frecuencia de 1Khz\n    - Resolucion de 8 bit (0-255)\n    - Canal 0\n  */\n  ledcAttachChannel(pwm, 1000, 8, 0);\n}\n\nvoid loop() {\n  /*ADELANTE*/\n  digitalWrite(in1, 0);\n  digitalWrite(in2, 1);\n  ledcWrite(pwm, 0);//Velocidad al 0%\n  delay(500);\n  ledcWrite(pwm, 51);//Velocidad al 20%\n  delay(500);\n  ledcWrite(pwm, 102);//Velocidad al 40%\n  delay(500);\n  ledcWrite(pwm, 153);//Velocidad al 60%\n  delay(500);\n  ledcWrite(pwm, 204);//Velocidad al 80%\n  delay(500);\n  ledcWrite(pwm, 255);//Velocidad al 100%\n  delay(500);\n}\n}\n</code></pre>"},{"location":"Tutorial/#practica-3-actuadores","title":"Pr\u00e1ctica 3 : Actuadores","text":"<ul> <li>Materiales: </li> <li>ESP 32</li> <li>Jumpers</li> <li>Motor</li> <li> <p>1 Microservo 9g</p> </li> </ul> <p>En esta parte de la pr\u00e1ctica se programa un ESP32 para controlar un servomotor, para ir cambiando gradualmente el \u00e1ngulo 0-90, 0-180 en un ciclo infinito.</p> <p>Video servomotor parte 2 <pre><code>  #define pwm 27\n  int duty = 0;\n  int grados=0;\n  void setup(){\n    /*Declarar Pines de Como salida*/\n    pinMode (27, OUTPUT);\n    /*Configuracion de pin pwm\n    -Se conecta al pin 27 (pwm)\n    -Frecuencia de 50hz\n    -Resoluci\u00f3n de 12 bit (0-4096)\n    -Canal\n  */\n  led AttachChannel (pwm, 50, 12, 0);\n  Serial.begin (115200);\n}\n  void loop(){\n/*\n  grados=0;\n  duty = map (grados, 0, 180, 205, 410);\n  Serial.print(\"Pos: \");\n  Serial.printIn (duty);\n  ledCWrite(pwm,duty);\n  delay(1000);\n  grados=90;\n  duty = map (grados, 0, 180, 205, 410);\n  Serial.print(\"Pos: \");\n  Serial.printIn (duty);\n  ledCWrite(pwm,duty);\n  delay(1000);\n  grados=180;\n  duty = map (grados, 0, 180, 205, 410);\n  Serial.print(\"Pos: \");\n  Serial.printIn (duty);\n  ledCWrite(pwm,duty);\n  delay(1000);\n} \n</code></pre></p>"},{"location":"Tutorial/#parte-1_2","title":"Parte 1:","text":""},{"location":"Tutorial/#parte-2","title":"Parte 2:","text":"<p>Video de servomotor girando progresivamente partiendo desde cero</p> <p>En esta parte el servomotor se programa para ir aumentando progresivamente 10\u00b0 iniciando desde los 0\u00b0.</p> <pre><code>    #define pwm 27\n  int duty = 0;\n  int grados=0;\n  void setup(){\n    pinMode (pwm, OUTPUT);\n    //Configuracion de pin pwm\n    //Frecuencia de 50hz, Resoluci\u00f3n de 12 bit (0-4096), Canal: 0\n\n  led AttachChannel (pwm, 50, 12, 0);\n  Serial.begin (115200);\n}\n  void loop(){\n    for(int angulo =10; angulo &lt;= 180; angulo +=10) {\n    //Ir a 9\u00b0\n    grados = 0;\n    duty =map (grados,0, 180, 205, 410);\n    Serial.print(\"Pos: \");\n    Serial.printIn(duty);\n    ledcWrite (pwm,duty);\n    delay (1000);\n//Ir al \u00e1ngulo actual\n    grados = angulo;\n    duty =map (grados,0, 180, 205, 410);\n    Serial.print(\"Pos: \");\n    Serial.printIn(duty);\n    ledcWrite (pwm,duty);\n    delay (1000);\n     }\n  }\n\n}\n</code></pre>"},{"location":"Tutorial/#proyecto-primer-parcial","title":"Proyecto Primer parcial","text":"<ul> <li>Materiales: </li> <li>ESP 32</li> <li>Jumpers</li> <li>2 motores</li> <li>1 Puente H</li> <li>2 llantas de 7cm de diametro</li> <li>1 rueda loca</li> <li>Tornillos</li> <li> <p>Baterias de 12V </p> </li> </ul> <pre><code> #include \"BluetoothSerial.h\"\nBluetoothSerial SerialBT;\n// Pines del puente H\nconst int IN1 = 4; // Motor izquierdo\nconst int IN2 = 16;\nconst int ENA = 2; //PWM\nconst int IN3 = 17; // Motor derecho\nconst int IN4 = 18;\nconst int ENB = 19;\nint valSpeed = 255; //PWM\n\n  Serial.begin(115200);\n\n  SerialBT.begin(\"Otrocarrito\"); // Nombre del dispositivo Bluetooth\n  pinMode(IN1, OUTPUT); //Motor derecho\n  pinMode(IN2, OUTPUT);\n  pinMode(ENA, OUTPUT);\n  pinMode(IN3, OUTPUT);//Motor izquierdo\n  pinMode(IN4, OUTPUT);\n  pinMode(ENB, OUTPUT);\n  stopMotors();\n}\n\nvoid loop() {\n  if (SerialBT.available()) {\n    char command = SerialBT.read();\n    Serial.println(command);\n    switch (command) {\n      case 'F': forward(); break;  //Adelante\n      case 'B': backward(); break; //Atras\n      case 'L': turnLeft(); break; //Izquierda\n      case 'R': turnRight(); break;//Derecha\n      case 'S': stopMotors(); break;//Detenerse\n      case '0': setSpeed(0); break;\n      case '1': setSpeed(25); break;\n      case '2': setSpeed(50); break;\n      case '3': setSpeed(75); break;\n      case '4': setSpeed(100); break;\n      case '5': setSpeed(125); break;\n      case '6': setSpeed(150); break;\n      case '7': setSpeed(175); break;\n      case '8': setSpeed(200); break;\n      case '9': setSpeed(255); break;\n    }\n  }\n\n}\n\nvoid forward() {\n  analogWrite(ENA, valSpeed);\n  analogWrite(ENB, valSpeed);\n  digitalWrite(IN1, HIGH);\n  digitalWrite(IN2, LOW);\n  digitalWrite(IN3, HIGH);\n  digitalWrite(IN4, LOW);\n}\n\nvoid backward() {\n  analogWrite(ENA, valSpeed);\n  analogWrite(ENB, valSpeed);\n  digitalWrite(IN1, LOW);\n  digitalWrite(IN2, HIGH);\n  digitalWrite(IN3, LOW);\n  digitalWrite(IN4, HIGH);\n}\n\nvoid turnLeft() {\n  analogWrite(ENA, valSpeed / 2);\n  analogWrite(ENB, valSpeed);\n  digitalWrite(IN1, HIGH);\n  digitalWrite(IN2, LOW);\n  digitalWrite(IN3, HIGH);\n  digitalWrite(IN4, LOW);\n}\n\nvoid turnRight() {\n  analogWrite(ENA, valSpeed);\n  analogWrite(ENB, valSpeed / 2);\n  digitalWrite(IN1, HIGH);\n  digitalWrite(IN2, LOW);\n  digitalWrite(IN3, HIGH);\n  digitalWrite(IN4, LOW);\n}\n\nvoid stopMotors() {\n  analogWrite(ENA, 0);\n  analogWrite(ENB, 0);\n  digitalWrite(IN1, LOW);\n  digitalWrite(IN2, LOW);\n  digitalWrite(IN3, LOW);\n  digitalWrite(IN4, LOW);\n}\n\nvoid setSpeed(int val) {\n\n  valSpeed = val;\n\n}\n</code></pre>"},{"location":"Tutorial/#diseno","title":"Dise\u00f1o:","text":"<p>Para este carro se inspiro en una camioneta Jeep, la camioneta presentada tiene detalles en vinil como lo son las flamas, letras con el nombre de la universidad, acrilico para las ventanas para simular los cristales, la carrocer\u00eda del carro fue cortada en MDF con corte laser</p>"},{"location":"Tutorial/#funcionamiento","title":"Funcionamiento","text":"<p>Se utilizo una aplicaci\u00f3n externa para controlar el movimiento del carrito. En el siguiente video es posible observar el funcionamiento piloto del proyecto:</p> <p>Pruebas piloto</p> <p>Pese a haber sido eficiente en sus pruebas piloto, el d\u00eda de la competencia sufrio contratiempos inesperados como se puede observar en el siguiente video:</p> <p>Video de competencia</p> <p>Se llega a la siguiente conclusi\u00f3n: Hay mejoras estructurales que podr\u00edan cambiarse en un siguiente proyecto, detalles a tomar en cuenta y hacer m\u00e1s pruebas con el proyecto previo a la entrega.</p>"},{"location":"comandos/","title":"Encabezados","text":"<pre><code># T\u00edtulo H1 \n## T\u00edtulo H2\n### T\u00edtulo H3\n</code></pre>"},{"location":"comandos/#titulo-h1","title":"T\u00edtulo H1","text":""},{"location":"comandos/#titulo-h2","title":"T\u00edtulo H2","text":""},{"location":"comandos/#titulo-h3","title":"T\u00edtulo H3","text":""},{"location":"comandos/#enfasis-y-codigo-en-linea","title":"\u00c9nfasis y c\u00f3digo en l\u00ednea","text":"<pre><code>**negritas**, *cursivas*, ~~tachado~~, `c\u00f3digo en l\u00ednea`\n</code></pre> <p>negritas, cursivas, ~~tachado~~, <code>c\u00f3digo en l\u00ednea</code></p>"},{"location":"comandos/#citas-blockquote","title":"Citas (blockquote)","text":"<pre><code>&gt; Esta es una cita destacada.\n&gt; Puede tener m\u00faltiples l\u00edneas.\n</code></pre> <p>Esta es una cita destacada. Puede tener m\u00faltiples l\u00edneas.</p>"},{"location":"comandos/#enlaces","title":"Enlaces","text":"<pre><code>[Enlace directo](https://www.iberopuebla.mx/)\n\n[Texto del enlace de referencia][doc-ref]\n\n[doc-ref]: https://www.iberopuebla.mx//docs \"T\u00edtulo opcional\"\n</code></pre> <p>Enlace directo</p> <p>Texto del enlace de referencia</p>"},{"location":"comandos/#listas-vinetas-numeradas-y-de-tareas","title":"Listas: vi\u00f1etas, numeradas y de tareas","text":"<pre><code>- Item A\n    * Subitem A.1\n    * Subitem A.2\n- Item B\n    - Subitem B.1\n    - Subitem B.2\n\n1.  Paso 1\n    1.  Paso 1.1\n    2.  Paso 1.2\n        1.  Paso 1.2.1\n        2.  Paso 1.2.2\n\n- [x] Hecho\n- [ ] Pendiente\n</code></pre> <ul> <li>Item A<ul> <li>Subitem A.1</li> <li>Subitem A.2</li> </ul> </li> <li>Item B<ul> <li>Subitem B.1</li> <li>Subitem B.2</li> </ul> </li> </ul> <ol> <li> <p>Paso 1</p> <ol> <li>Paso 1.1</li> <li>Paso 1.2<ol> <li>Paso 1.2.1</li> <li>Paso 1.2.2</li> </ol> </li> </ol> </li> <li> <p> Hecho</p> </li> <li> Pendiente</li> </ol>"},{"location":"comandos/#tablas","title":"Tablas","text":"<pre><code>| Componente | Cant. | Nota        |\n|-----------:|:-----:|-------------|\n| Sensor X   | 2     | I2C         |\n| MCU Y      | 1     | WiFi/BLE    |\n</code></pre> Componente Cant. Nota Sensor X 2 I2C MCU Y 1 WiFi/BLE"},{"location":"comandos/#imagenes","title":"Im\u00e1genes","text":"<pre><code>![Diagrama del sistema](recursos/imgs/ibero.jpeg)\n\n&lt;!-- Control de tama\u00f1o usando HTML (cuando se requiera) --&gt;\n&lt;img src=\"../recursos/imgs/ibero.jpeg\" alt=\"Diagrama del sistema\" width=\"420\"&gt;\n</code></pre>"},{"location":"comandos/#pdfs-enlace-y-embebido","title":"PDFs (enlace y embebido)","text":"<pre><code>[Descargar especificaci\u00f3n (PDF)](recursos/archivos/Calendario.pdf)\n\n&lt;!-- Embed (requiere navegador compatible) --&gt;\n&lt;object data=\"recursos/archivos/Calendario.pdf\" type=\"application/pdf\" width=\"100%\" height=\"600\"&gt;\n  &lt;p&gt;No se pudo mostrar el PDF. &lt;a href=\"../recursos/archivos/Calendario.pdf\"&gt;Descargar&lt;/a&gt;&lt;/p&gt;\n&lt;/object&gt;\n</code></pre> <p>Descargar especificaci\u00f3n (PDF)</p>"},{"location":"comandos/#admonitions-material","title":"Admonitions (Material)","text":"<pre><code>!!! note \"Nota\"\n    Esto es una nota informativa.\n\n!!! tip \"Sugerencia\"\n    Un consejo breve para el usuario.\n\n!!! warning \"Advertencia\"\n    Precauciones o riesgos a considerar.\n\n??? info \"M\u00e1s informaci\u00f3n (colapsable)\"\n    Contenido adicional que se puede expandir.\n</code></pre> <p>Nota</p> <p>Esto es una nota informativa.</p> <p>Sugerencia</p> <p>Un consejo breve para el usuario.</p> <p>Advertencia</p> <p>Precauciones o riesgos a considerar.</p> M\u00e1s informaci\u00f3n (colapsable) <p>Contenido adicional que se puede expandir.</p>"},{"location":"comandos/#codigo-con-resaltado","title":"C\u00f3digo con resaltado","text":"<p><pre><code>```python\ndef medir(canal: int) -&gt; dict:\n    # Simulaci\u00f3n de lectura\n    return {\"canal\": canal, \"valor\": 523, \"unidad\": \"mV\"}\n\nprint(medir(1))\n</code></pre> <pre><code>```python\ndef medir(canal: int) -&gt; dict:\n    # Simulaci\u00f3n de lectura\n    return {\"canal\": canal, \"valor\": 523, \"unidad\": \"mV\"}\n\nprint(medir(1))\n</code></pre></p>"},{"location":"comandos/#separador-horizontal","title":"Separador horizontal","text":"<pre><code>---\n</code></pre>"},{"location":"comandos/#listas-anidadas-con-codigo-y-notas","title":"Listas anidadas con c\u00f3digo y notas","text":"<pre><code>- **M\u00f3dulo A**\n  - Funci\u00f3n: `procesar()`\n  - Entrada:\n    - `signal` (float)\n    - `freq` (Hz)\n  - Salida:\n    - JSON con `valor`, `unidad`\n  - !!! note\n        Documenta rangos v\u00e1lidos y casos borde.\n</code></pre> <ul> <li>M\u00f3dulo A</li> <li>Funci\u00f3n: <code>procesar()</code></li> <li>Entrada:<ul> <li><code>signal</code> (float)</li> <li><code>freq</code> (Hz)</li> </ul> </li> <li>Salida:<ul> <li>JSON con <code>valor</code>, <code>unidad</code></li> </ul> </li> <li> <p>Note</p> <pre><code>Documenta rangos v\u00e1lidos y casos borde.\n</code></pre> </li> </ul>"},{"location":"comandos/#bloques-de-cita-con-codigo-pseudo-logs","title":"Bloques de cita con c\u00f3digo (pseudo-logs)","text":"<pre><code>&gt; **Log:**\n&gt; ```\n&gt; [12:00:00] Init OK\n&gt; [12:00:01] Conectando a I2C...\n&gt; [12:00:02] Lectura: 523 mV\n&gt; ```\n</code></pre> <p>Log: <pre><code>[12:00:00] Init OK\n[12:00:01] Conectando a I2C...\n[12:00:02] Lectura: 523 mV\n</code></pre></p>"},{"location":"ejemplo/","title":"Sobre mi","text":"<p>Informaci\u00f3n general sobre la alumna  </p>"},{"location":"ejemplo/#resumen-personal","title":"Resumen Personal","text":"<ul> <li>Nombre _Alexandra Groot Cruz _  </li> <li>Carrera Ingenier\u00eda en Mecatr\u00f3nica </li> <li>Semestre: 1\u00b0 </li> <li>Informaci\u00f3n de contacto alexagroot@gmail.com</li> </ul> <p>Intereses</p> <p>Me gusta escuchar kpop (mis grupos favoritos son TXT y Twice), cocinar postres, leer, hacer manualidades y ver anime.</p> <p>Logros significativos</p> <p>Participar en concursos nacionales de f\u00edsica y matem\u00e1ticas, habiendo ganado medalla en dos ocasiones y gracias a estos mismos poder viajar a otros estados de la Rep\u00fablica, al mismo tiempo de conocer y convivir con personas que les apasiona las ciencias exactas en la misma manera en lo que me gusta a mi.</p> <p></p> <p></p>"},{"location":"gitcmds/","title":"\ud83d\ude80 Comandos b\u00e1sicos de Git (primeros pasos)","text":"<p>En este curso solo usaremos los comandos esenciales de Git para trabajar con repositorios.</p>"},{"location":"gitcmds/#1-clonar-un-repositorio","title":"1. Clonar un repositorio","text":"<p>Copia un proyecto de GitHub a tu computadora.</p> <pre><code>git clone https://github.com/usuario/repositorio.git\n</code></pre>"},{"location":"gitcmds/#2-verificar-cambios","title":"2. Verificar cambios","text":"<p>Muestra qu\u00e9 archivos has modificado o agregado.</p> <pre><code>git status\n</code></pre>"},{"location":"gitcmds/#3-preparar-cambios","title":"3. Preparar cambios","text":"<p>Agrega archivos para guardarlos en el pr\u00f3ximo commit.</p> <pre><code>git add archivo.txt\ngit add .   # agrega todos los archivos modificados\n</code></pre>"},{"location":"gitcmds/#4-guardar-cambios-commit","title":"4. Guardar cambios (commit)","text":"<p>Guarda tus cambios con un mensaje descriptivo.</p> <pre><code>git commit -m \"Descripci\u00f3n breve de los cambios\"\n</code></pre>"},{"location":"gitcmds/#5-subir-cambios-al-repositorio-push","title":"5. Subir cambios al repositorio (push)","text":"<p>Env\u00eda tus commits locales al repositorio en GitHub.</p> <pre><code>git push origin main\n</code></pre>"},{"location":"gitcmds/#6-traer-cambios-del-remoto-pull","title":"6. Traer cambios del remoto (pull)","text":"<p>Actualiza tu proyecto con los \u00faltimos cambios de GitHub.</p> <pre><code>git pull origin main\n</code></pre>"},{"location":"gitcmds/#flujo-tipico-de-trabajo","title":"Flujo t\u00edpico de trabajo","text":"<ol> <li> <p>Traer cambios del remoto <pre><code>git pull origin main\n</code></pre></p> </li> <li> <p>Editar tus archivos de proyecto.</p> </li> <li> <p>Preparar los cambios <pre><code>git add .\n</code></pre></p> </li> <li> <p>Guardar los cambios <pre><code>git commit -m \"Mensaje descriptivo\"\n</code></pre></p> </li> <li> <p>Enviar los cambios al remoto <pre><code>git push origin main\n</code></pre></p> </li> </ol> <p>Consejo</p> <p>Piensa en este ciclo como un loop infinito: cada vez que quieras contribuir \u2192 primero <code>pull</code>, despu\u00e9s <code>add</code> + <code>commit</code>, y finalmente <code>push</code>.</p>"}]}